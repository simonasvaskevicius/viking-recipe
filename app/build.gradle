
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

loadExtraProperties "${rootDir}/signing.properties"

android {
    def version = new Version("${rootDir}/version.properties")
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.vaskevicius.android.vikingrecipe"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode version.getVersionCode()
        versionName version.getVersion()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {

        //comment out this whole 'signingConfigs' to bypass signing errors

        release project.hasProperty('RELEASE_STORE_FILE') ? {
            storeFile rootProject.file("${rootDir}/${RELEASE_STORE_FILE}")
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        } : {}

        debug project.hasProperty('DEBUG_STORE_FILE') ? {
            storeFile rootProject.file("${rootDir}/${DEBUG_STORE_FILE}")
            storePassword DEBUG_STORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        } : {}
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            buildConfigField "String", "BASE_URL", "\"https://www.themealdb.com/api/json/\""
            buildConfigField "String", "PREF_NAME", "\"viking_preferences\""
            debuggable true
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", "\"https://www.themealdb.com/api/json/\""
            buildConfigField "String", "PREF_NAME", "\"viking_preferences\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

repositories {
    mavenCentral()
}


dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //dependency injection
    implementation "com.google.dagger:dagger:2.23"
    kapt "com.google.dagger:dagger-compiler:2.23"
    kapt "com.google.dagger:dagger-android-processor:2.23"
    implementation "com.google.dagger:dagger-android-support:2.23"

    // code generator for view
    implementation "com.jakewharton:butterknife:10.2.3"
    kapt "com.jakewharton:butterknife-compiler:10.2.3"

    //network related dependencies
    implementation "com.google.code.gson:gson:2.7"
    implementation "com.github.bumptech.glide:glide:3.7.0"
    implementation "com.amitshekhar.android:rx2-android-networking:1.0.2"

    //rx java dependencies
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    implementation "io.reactivex.rxjava2:rxjava:2.2.2"
    implementation "io.reactivex.rxjava2:rxkotlin:2.3.0"

    //utils
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:3.0.0-RC2'
    implementation 'com.github.Pradyuman7:ChocoBar:V1.5'
    implementation 'com.makeramen:roundedimageview:2.3.0'


    //dependency injection
    implementation "com.google.dagger:dagger:2.31"
    kapt "com.google.dagger:dagger-compiler:2.31"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'

    //UTILS
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation 'com.squareup.picasso:picasso:2.8'

    //TODO: Room database
    //database dependencies
    def room_version = "2.2.6"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
}


def loadExtraProperties(String fileName) {
    if (new File(fileName).exists()) {
        def props = new Properties()
        props.load(new FileInputStream(fileName))

        props.each { key, val -> project.ext.set(key, val)
        }
    }
}

class Version {

    private String fileName
    private File versionFile
    private Properties properties
    private int major
    private int minor
    private int patch
    private int number
    private String suffix
    private boolean nightly

    Version(String fileName) {
        this.fileName = fileName
        load()
    }

    def load() {
        versionFile = new File(fileName)
        if (versionFile.canRead()) {
            properties = new Properties()
            properties.load(new FileInputStream(versionFile))

            major = properties['MAJOR'].toInteger()
            minor = properties['MINOR'].toInteger()
            patch = properties['PATCH'].toInteger()
            number = properties['BUILD'].toInteger()
            suffix = properties['SUFFIX'].toString()
            nightly = Boolean.parseBoolean(properties['NIGHTLY'].toString())
        } else {
            throw new GradleException("Could not read version file")
        }
    }

    String getVersion() {
        return "${major}.${minor}" + (patch != 0 ? ".${patch}" : "")
    }

    String getBuild() {
        return number.toString()
    }

    String getSuffix() {
        if (nightly) return "-${suffix}" else return "-${suffix}${number}"
    }

    int getVersionCode() {
        major * 1000000 + minor * 10000 + patch * 100 + number
    }
}